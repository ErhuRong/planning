# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_graphplan', [dirname(__file__)])
        except ImportError:
            import _graphplan
            return _graphplan
        if fp is not None:
            try:
                _mod = imp.load_module('_graphplan', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _graphplan = swig_import_helper()
    del swig_import_helper
else:
    import _graphplan
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class edgelist_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, edgelist_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, edgelist_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["endpt"] = _graphplan.edgelist_s_endpt_set
    __swig_getmethods__["endpt"] = _graphplan.edgelist_s_endpt_get
    if _newclass:
        endpt = _swig_property(_graphplan.edgelist_s_endpt_get, _graphplan.edgelist_s_endpt_set)
    __swig_setmethods__["next"] = _graphplan.edgelist_s_next_set
    __swig_getmethods__["next"] = _graphplan.edgelist_s_next_get
    if _newclass:
        next = _swig_property(_graphplan.edgelist_s_next_get, _graphplan.edgelist_s_next_set)

    def __init__(self):
        this = _graphplan.new_edgelist_s()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _graphplan.delete_edgelist_s
    __del__ = lambda self: None
edgelist_s_swigregister = _graphplan.edgelist_s_swigregister
edgelist_s_swigregister(edgelist_s)


_graphplan.MAXMAXNODES_swigconstant(_graphplan)
MAXMAXNODES = _graphplan.MAXMAXNODES

_graphplan.NUMINTS_swigconstant(_graphplan)
NUMINTS = _graphplan.NUMINTS

_graphplan.HSIZE_swigconstant(_graphplan)
HSIZE = _graphplan.HSIZE

_graphplan.MAX_TOKENS_swigconstant(_graphplan)
MAX_TOKENS = _graphplan.MAX_TOKENS

_graphplan.MAXGOALS_swigconstant(_graphplan)
MAXGOALS = _graphplan.MAXGOALS

_graphplan.max_auto_swigconstant(_graphplan)
max_auto = _graphplan.max_auto
class VERTEX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VERTEX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VERTEX, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _graphplan.VERTEX_name_set
    __swig_getmethods__["name"] = _graphplan.VERTEX_name_get
    if _newclass:
        name = _swig_property(_graphplan.VERTEX_name_get, _graphplan.VERTEX_name_set)
    __swig_setmethods__["hashval"] = _graphplan.VERTEX_hashval_set
    __swig_getmethods__["hashval"] = _graphplan.VERTEX_hashval_get
    if _newclass:
        hashval = _swig_property(_graphplan.VERTEX_hashval_get, _graphplan.VERTEX_hashval_set)
    __swig_setmethods__["in_edges"] = _graphplan.VERTEX_in_edges_set
    __swig_getmethods__["in_edges"] = _graphplan.VERTEX_in_edges_get
    if _newclass:
        in_edges = _swig_property(_graphplan.VERTEX_in_edges_get, _graphplan.VERTEX_in_edges_set)
    __swig_setmethods__["out_edges"] = _graphplan.VERTEX_out_edges_set
    __swig_getmethods__["out_edges"] = _graphplan.VERTEX_out_edges_get
    if _newclass:
        out_edges = _swig_property(_graphplan.VERTEX_out_edges_get, _graphplan.VERTEX_out_edges_set)
    __swig_setmethods__["del_list"] = _graphplan.VERTEX_del_list_set
    __swig_getmethods__["del_list"] = _graphplan.VERTEX_del_list_get
    if _newclass:
        del_list = _swig_property(_graphplan.VERTEX_del_list_get, _graphplan.VERTEX_del_list_set)
    __swig_setmethods__["del_edges"] = _graphplan.VERTEX_del_edges_set
    __swig_getmethods__["del_edges"] = _graphplan.VERTEX_del_edges_get
    if _newclass:
        del_edges = _swig_property(_graphplan.VERTEX_del_edges_get, _graphplan.VERTEX_del_edges_set)
    __swig_setmethods__["exclusive"] = _graphplan.VERTEX_exclusive_set
    __swig_getmethods__["exclusive"] = _graphplan.VERTEX_exclusive_get
    if _newclass:
        exclusive = _swig_property(_graphplan.VERTEX_exclusive_get, _graphplan.VERTEX_exclusive_set)
    __swig_setmethods__["exclusive_vect"] = _graphplan.VERTEX_exclusive_vect_set
    __swig_getmethods__["exclusive_vect"] = _graphplan.VERTEX_exclusive_vect_get
    if _newclass:
        exclusive_vect = _swig_property(_graphplan.VERTEX_exclusive_vect_get, _graphplan.VERTEX_exclusive_vect_set)
    __swig_setmethods__["excl_in_this_step"] = _graphplan.VERTEX_excl_in_this_step_set
    __swig_getmethods__["excl_in_this_step"] = _graphplan.VERTEX_excl_in_this_step_get
    if _newclass:
        excl_in_this_step = _swig_property(_graphplan.VERTEX_excl_in_this_step_get, _graphplan.VERTEX_excl_in_this_step_set)
    __swig_setmethods__["excl_in_this_step_vect"] = _graphplan.VERTEX_excl_in_this_step_vect_set
    __swig_getmethods__["excl_in_this_step_vect"] = _graphplan.VERTEX_excl_in_this_step_vect_get
    if _newclass:
        excl_in_this_step_vect = _swig_property(_graphplan.VERTEX_excl_in_this_step_vect_get, _graphplan.VERTEX_excl_in_this_step_vect_set)
    __swig_setmethods__["used"] = _graphplan.VERTEX_used_set
    __swig_getmethods__["used"] = _graphplan.VERTEX_used_get
    if _newclass:
        used = _swig_property(_graphplan.VERTEX_used_get, _graphplan.VERTEX_used_set)
    __swig_setmethods__["is_true"] = _graphplan.VERTEX_is_true_set
    __swig_getmethods__["is_true"] = _graphplan.VERTEX_is_true_get
    if _newclass:
        is_true = _swig_property(_graphplan.VERTEX_is_true_get, _graphplan.VERTEX_is_true_set)
    __swig_setmethods__["cant_do"] = _graphplan.VERTEX_cant_do_set
    __swig_getmethods__["cant_do"] = _graphplan.VERTEX_cant_do_get
    if _newclass:
        cant_do = _swig_property(_graphplan.VERTEX_cant_do_get, _graphplan.VERTEX_cant_do_set)
    __swig_setmethods__["needed"] = _graphplan.VERTEX_needed_set
    __swig_getmethods__["needed"] = _graphplan.VERTEX_needed_get
    if _newclass:
        needed = _swig_property(_graphplan.VERTEX_needed_get, _graphplan.VERTEX_needed_set)
    __swig_setmethods__["uid_block"] = _graphplan.VERTEX_uid_block_set
    __swig_getmethods__["uid_block"] = _graphplan.VERTEX_uid_block_get
    if _newclass:
        uid_block = _swig_property(_graphplan.VERTEX_uid_block_get, _graphplan.VERTEX_uid_block_set)
    __swig_setmethods__["uid_mask"] = _graphplan.VERTEX_uid_mask_set
    __swig_getmethods__["uid_mask"] = _graphplan.VERTEX_uid_mask_get
    if _newclass:
        uid_mask = _swig_property(_graphplan.VERTEX_uid_mask_get, _graphplan.VERTEX_uid_mask_set)
    __swig_setmethods__["prev_time"] = _graphplan.VERTEX_prev_time_set
    __swig_getmethods__["prev_time"] = _graphplan.VERTEX_prev_time_get
    if _newclass:
        prev_time = _swig_property(_graphplan.VERTEX_prev_time_get, _graphplan.VERTEX_prev_time_set)
    __swig_setmethods__["next_time"] = _graphplan.VERTEX_next_time_set
    __swig_getmethods__["next_time"] = _graphplan.VERTEX_next_time_get
    if _newclass:
        next_time = _swig_property(_graphplan.VERTEX_next_time_get, _graphplan.VERTEX_next_time_set)
    __swig_setmethods__["rand1"] = _graphplan.VERTEX_rand1_set
    __swig_getmethods__["rand1"] = _graphplan.VERTEX_rand1_get
    if _newclass:
        rand1 = _swig_property(_graphplan.VERTEX_rand1_get, _graphplan.VERTEX_rand1_set)
    __swig_setmethods__["junk"] = _graphplan.VERTEX_junk_set
    __swig_getmethods__["junk"] = _graphplan.VERTEX_junk_get
    if _newclass:
        junk = _swig_property(_graphplan.VERTEX_junk_get, _graphplan.VERTEX_junk_set)
    __swig_setmethods__["is_noop"] = _graphplan.VERTEX_is_noop_set
    __swig_getmethods__["is_noop"] = _graphplan.VERTEX_is_noop_get
    if _newclass:
        is_noop = _swig_property(_graphplan.VERTEX_is_noop_get, _graphplan.VERTEX_is_noop_set)
    __swig_setmethods__["next"] = _graphplan.VERTEX_next_set
    __swig_getmethods__["next"] = _graphplan.VERTEX_next_get
    if _newclass:
        next = _swig_property(_graphplan.VERTEX_next_get, _graphplan.VERTEX_next_set)

    def __init__(self):
        this = _graphplan.new_VERTEX()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _graphplan.delete_VERTEX
    __del__ = lambda self: None
VERTEX_swigregister = _graphplan.VERTEX_swigregister
VERTEX_swigregister(VERTEX)

class pair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pair, name)
    __repr__ = _swig_repr
    __swig_setmethods__["first"] = _graphplan.pair_first_set
    __swig_getmethods__["first"] = _graphplan.pair_first_get
    if _newclass:
        first = _swig_property(_graphplan.pair_first_get, _graphplan.pair_first_set)
    __swig_setmethods__["second"] = _graphplan.pair_second_set
    __swig_getmethods__["second"] = _graphplan.pair_second_get
    if _newclass:
        second = _swig_property(_graphplan.pair_second_get, _graphplan.pair_second_set)

    def __init__(self):
        this = _graphplan.new_pair()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _graphplan.delete_pair
    __del__ = lambda self: None
pair_swigregister = _graphplan.pair_swigregister
pair_swigregister(pair)

class token_list_elt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, token_list_elt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, token_list_elt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["item"] = _graphplan.token_list_elt_item_set
    __swig_getmethods__["item"] = _graphplan.token_list_elt_item_get
    if _newclass:
        item = _swig_property(_graphplan.token_list_elt_item_get, _graphplan.token_list_elt_item_set)
    __swig_setmethods__["next"] = _graphplan.token_list_elt_next_set
    __swig_getmethods__["next"] = _graphplan.token_list_elt_next_get
    if _newclass:
        next = _swig_property(_graphplan.token_list_elt_next_get, _graphplan.token_list_elt_next_set)

    def __init__(self):
        this = _graphplan.new_token_list_elt()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _graphplan.delete_token_list_elt
    __del__ = lambda self: None
token_list_elt_swigregister = _graphplan.token_list_elt_swigregister
token_list_elt_swigregister(token_list_elt)

class fact_list_elt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fact_list_elt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fact_list_elt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["item"] = _graphplan.fact_list_elt_item_set
    __swig_getmethods__["item"] = _graphplan.fact_list_elt_item_get
    if _newclass:
        item = _swig_property(_graphplan.fact_list_elt_item_get, _graphplan.fact_list_elt_item_set)
    __swig_setmethods__["next"] = _graphplan.fact_list_elt_next_set
    __swig_getmethods__["next"] = _graphplan.fact_list_elt_next_get
    if _newclass:
        next = _swig_property(_graphplan.fact_list_elt_next_get, _graphplan.fact_list_elt_next_set)

    def __init__(self):
        this = _graphplan.new_fact_list_elt()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _graphplan.delete_fact_list_elt
    __del__ = lambda self: None
fact_list_elt_swigregister = _graphplan.fact_list_elt_swigregister
fact_list_elt_swigregister(fact_list_elt)

class instantiation_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, instantiation_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, instantiation_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["const_part"] = _graphplan.instantiation_s_const_part_set
    __swig_getmethods__["const_part"] = _graphplan.instantiation_s_const_part_get
    if _newclass:
        const_part = _swig_property(_graphplan.instantiation_s_const_part_get, _graphplan.instantiation_s_const_part_set)
    __swig_setmethods__["var_part"] = _graphplan.instantiation_s_var_part_set
    __swig_getmethods__["var_part"] = _graphplan.instantiation_s_var_part_get
    if _newclass:
        var_part = _swig_property(_graphplan.instantiation_s_var_part_get, _graphplan.instantiation_s_var_part_set)
    __swig_setmethods__["next"] = _graphplan.instantiation_s_next_set
    __swig_getmethods__["next"] = _graphplan.instantiation_s_next_get
    if _newclass:
        next = _swig_property(_graphplan.instantiation_s_next_get, _graphplan.instantiation_s_next_set)

    def __init__(self):
        this = _graphplan.new_instantiation_s()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _graphplan.delete_instantiation_s
    __del__ = lambda self: None
instantiation_s_swigregister = _graphplan.instantiation_s_swigregister
instantiation_s_swigregister(instantiation_s)

class op_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, op_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, op_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _graphplan.op_s_name_set
    __swig_getmethods__["name"] = _graphplan.op_s_name_get
    if _newclass:
        name = _swig_property(_graphplan.op_s_name_get, _graphplan.op_s_name_set)
    __swig_setmethods__["params"] = _graphplan.op_s_params_set
    __swig_getmethods__["params"] = _graphplan.op_s_params_get
    if _newclass:
        params = _swig_property(_graphplan.op_s_params_get, _graphplan.op_s_params_set)
    __swig_setmethods__["preconds"] = _graphplan.op_s_preconds_set
    __swig_getmethods__["preconds"] = _graphplan.op_s_preconds_get
    if _newclass:
        preconds = _swig_property(_graphplan.op_s_preconds_get, _graphplan.op_s_preconds_set)
    __swig_setmethods__["effects"] = _graphplan.op_s_effects_set
    __swig_getmethods__["effects"] = _graphplan.op_s_effects_get
    if _newclass:
        effects = _swig_property(_graphplan.op_s_effects_get, _graphplan.op_s_effects_set)
    __swig_setmethods__["insts"] = _graphplan.op_s_insts_set
    __swig_getmethods__["insts"] = _graphplan.op_s_insts_get
    if _newclass:
        insts = _swig_property(_graphplan.op_s_insts_get, _graphplan.op_s_insts_set)
    __swig_setmethods__["next"] = _graphplan.op_s_next_set
    __swig_getmethods__["next"] = _graphplan.op_s_next_get
    if _newclass:
        next = _swig_property(_graphplan.op_s_next_get, _graphplan.op_s_next_set)

    def __init__(self):
        this = _graphplan.new_op_s()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _graphplan.delete_op_s
    __del__ = lambda self: None
op_s_swigregister = _graphplan.op_s_swigregister
op_s_swigregister(op_s)


_graphplan.SAME_swigconstant(_graphplan)
SAME = _graphplan.SAME

_graphplan.DIFFERENT_swigconstant(_graphplan)
DIFFERENT = _graphplan.DIFFERENT

_graphplan.PARAM_swigconstant(_graphplan)
PARAM = _graphplan.PARAM

_graphplan.PRECOND_swigconstant(_graphplan)
PRECOND = _graphplan.PRECOND

_graphplan.EFFECT_swigconstant(_graphplan)
EFFECT = _graphplan.EFFECT

_graphplan.OPR_swigconstant(_graphplan)
OPR = _graphplan.OPR

_graphplan.DELETE_swigconstant(_graphplan)
DELETE = _graphplan.DELETE

_graphplan.LISPEXT_swigconstant(_graphplan)
LISPEXT = _graphplan.LISPEXT

_graphplan.OK_swigconstant(_graphplan)
OK = _graphplan.OK

_graphplan.LEFT_PAREN_swigconstant(_graphplan)
LEFT_PAREN = _graphplan.LEFT_PAREN

_graphplan.RIGHT_PAREN_swigconstant(_graphplan)
RIGHT_PAREN = _graphplan.RIGHT_PAREN

_graphplan.YES_swigconstant(_graphplan)
YES = _graphplan.YES

_graphplan.NO_swigconstant(_graphplan)
NO = _graphplan.NO

_graphplan.NEW_INSTS_swigconstant(_graphplan)
NEW_INSTS = _graphplan.NEW_INSTS

_graphplan.CONNECTOR_swigconstant(_graphplan)
CONNECTOR = _graphplan.CONNECTOR

_graphplan.TRUE_swigconstant(_graphplan)
TRUE = _graphplan.TRUE

_graphplan.NOOP_swigconstant(_graphplan)
NOOP = _graphplan.NOOP

def create_graph(olist, flist, totaltime):
    return _graphplan.create_graph(olist, flist, totaltime)
create_graph = _graphplan.create_graph

def create_graph_layer(olist):
    return _graphplan.create_graph_layer(olist)
create_graph_layer = _graphplan.create_graph_layer

def load_ops(fp):
    return _graphplan.load_ops(fp)
load_ops = _graphplan.load_ops

def load_fact_list(fp, fptr):
    return _graphplan.load_fact_list(fp, fptr)
load_fact_list = _graphplan.load_fact_list

def make_graph_piece(op, time):
    return _graphplan.make_graph_piece(op, time)
make_graph_piece = _graphplan.make_graph_piece

def do_operator(htable, current_facts, op, p, time):
    return _graphplan.do_operator(htable, current_facts, op, p, time)
do_operator = _graphplan.do_operator

def remove_unneeded_vertices(time):
    return _graphplan.remove_unneeded_vertices(time)
remove_unneeded_vertices = _graphplan.remove_unneeded_vertices

def can_stop(time):
    return _graphplan.can_stop(time)
can_stop = _graphplan.can_stop

def make_copy(time):
    return _graphplan.make_copy(time)
make_copy = _graphplan.make_copy

def load_prodigy_ops(fp):
    return _graphplan.load_prodigy_ops(fp)
load_prodigy_ops = _graphplan.load_prodigy_ops

def useful_facts(ops, f):
    return _graphplan.useful_facts(ops, f)
useful_facts = _graphplan.useful_facts

def print_cant_do(time):
    return _graphplan.print_cant_do(time)
print_cant_do = _graphplan.print_cant_do

def load_types(fp):
    return _graphplan.load_types(fp)
load_types = _graphplan.load_types

def do_final_viewing():
    return _graphplan.do_final_viewing()
do_final_viewing = _graphplan.do_final_viewing

def lookup_from_table(htable, key):
    return _graphplan.lookup_from_table(htable, key)
lookup_from_table = _graphplan.lookup_from_table

def insert_token_list(htable, t):
    return _graphplan.insert_token_list(htable, t)
insert_token_list = _graphplan.insert_token_list

def insert_into_table(htable, key):
    return _graphplan.insert_into_table(htable, key)
insert_into_table = _graphplan.insert_into_table

def delete_unneeded(htable):
    return _graphplan.delete_unneeded(htable)
delete_unneeded = _graphplan.delete_unneeded

def delete_from_table(htable, key, to_kill):
    return _graphplan.delete_from_table(htable, key, to_kill)
delete_from_table = _graphplan.delete_from_table

def insert_edge(e, v):
    return _graphplan.insert_edge(e, v)
insert_edge = _graphplan.insert_edge

def get_next(h, flag):
    return _graphplan.get_next(h, flag)
get_next = _graphplan.get_next

def make_noop_string(str):
    return _graphplan.make_noop_string(str)
make_noop_string = _graphplan.make_noop_string

def make_list_from_htable(h):
    return _graphplan.make_list_from_htable(h)
make_list_from_htable = _graphplan.make_list_from_htable

def insert_inst(v, c, i):
    return _graphplan.insert_inst(v, c, i)
insert_inst = _graphplan.insert_inst

def instantiate_into_string(t, inst, str, failflag):
    return _graphplan.instantiate_into_string(t, inst, str, failflag)
instantiate_into_string = _graphplan.instantiate_into_string

def read_item(fp, str):
    return _graphplan.read_item(fp, str)
read_item = _graphplan.read_item

def make_op_string(op, str):
    return _graphplan.make_op_string(op, str)
make_op_string = _graphplan.make_op_string

def do_error(s):
    return _graphplan.do_error(s)
do_error = _graphplan.do_error

def equal_facts(f1, f2):
    return _graphplan.equal_facts(f1, f2)
equal_facts = _graphplan.equal_facts

def find_mutex_facts(harr, time):
    return _graphplan.find_mutex_facts(harr, time)
find_mutex_facts = _graphplan.find_mutex_facts

def find_currently_mutex_facts():
    return _graphplan.find_currently_mutex_facts()
find_currently_mutex_facts = _graphplan.find_currently_mutex_facts

def are_facts_exclusive(p, q):
    return _graphplan.are_facts_exclusive(p, q)
are_facts_exclusive = _graphplan.are_facts_exclusive

def find_all_mutex_ops(harr, time):
    return _graphplan.find_all_mutex_ops(harr, time)
find_all_mutex_ops = _graphplan.find_all_mutex_ops

def find_mutex_ops(v, time):
    return _graphplan.find_mutex_ops(v, time)
find_mutex_ops = _graphplan.find_mutex_ops

def avoidable(op):
    return _graphplan.avoidable(op)
avoidable = _graphplan.avoidable

def are_mutex(v1, v2):
    return _graphplan.are_mutex(v1, v2)
are_mutex = _graphplan.are_mutex

def print_graph(fact_arr, op_arr, len):
    return _graphplan.print_graph(fact_arr, op_arr, len)
print_graph = _graphplan.print_graph

def read_initial_comments(fp):
    return _graphplan.read_initial_comments(fp)
read_initial_comments = _graphplan.read_initial_comments

def my_free(p):
    return _graphplan.my_free(p)
my_free = _graphplan.my_free

def my_alloc(size):
    return _graphplan.my_alloc(size)
my_alloc = _graphplan.my_alloc

def print_alloc():
    return _graphplan.print_alloc()
print_alloc = _graphplan.print_alloc

def completely_free_fact_list(l):
    return _graphplan.completely_free_fact_list(l)
completely_free_fact_list = _graphplan.completely_free_fact_list

def free_token_list(l):
    return _graphplan.free_token_list(l)
free_token_list = _graphplan.free_token_list

def compare_and_instantiate(arg1, arg2, arg3):
    return _graphplan.compare_and_instantiate(arg1, arg2, arg3)
compare_and_instantiate = _graphplan.compare_and_instantiate

def token_list_from_string(str):
    return _graphplan.token_list_from_string(str)
token_list_from_string = _graphplan.token_list_from_string

def set_uid(v, id):
    return _graphplan.set_uid(v, id)
set_uid = _graphplan.set_uid

def do_plan(maxtime):
    return _graphplan.do_plan(maxtime)
do_plan = _graphplan.do_plan

def print_plan(maxtime):
    return _graphplan.print_plan(maxtime)
print_plan = _graphplan.print_plan

def print_info(len):
    return _graphplan.print_info(len)
print_info = _graphplan.print_info

def try_facts(f1, f2, time):
    return _graphplan.try_facts(f1, f2, time)
try_facts = _graphplan.try_facts

def setup_viewer():
    return _graphplan.setup_viewer()
setup_viewer = _graphplan.setup_viewer

def wait_until_left():
    return _graphplan.wait_until_left()
wait_until_left = _graphplan.wait_until_left

def reset_viewer(max_time):
    return _graphplan.reset_viewer(max_time)
reset_viewer = _graphplan.reset_viewer

def draw_fact(v, time, flag):
    return _graphplan.draw_fact(v, time, flag)
draw_fact = _graphplan.draw_fact

def draw_op(v, time, flag, thick):
    return _graphplan.draw_op(v, time, flag, thick)
draw_op = _graphplan.draw_op

def instrs():
    return _graphplan.instrs()
instrs = _graphplan.instrs

def oldmain(argc):
    return _graphplan.oldmain(argc)
oldmain = _graphplan.oldmain
# This file is compatible with both classic and new-style classes.

cvar = _graphplan.cvar

